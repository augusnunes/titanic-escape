
"""Enzo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mPzIuagTSt_A5yBUfAaj46iNw0hyCuEv
"""

"""trabs
# 18:18
### 
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18DsnZiTLDotLcAHqR40M4sMAEgl__ZXr
"""

#########  UNIAO  #########

# import required libraries
import time
from pprint import pprint
from copy import deepcopy


# Superclasses
class Scenario:
    """
      Abstract data structure of the game's scenario 
    """

    def __init__(self):
        self.actual = None
        self.envs = {}

    def add_environment(self, env, env_idx):
        """
            Method to add the given environment to the scenario
          Parameters:
            env (Environment): environment to add
        """
        if not self.actual:
            self.actual = env_idx
        self.envs[env_idx] = env


    def esquerda(self):
        
        # check if there is a next environment
        if self.actual == '1':
            print("Você está no primeiro ambiente")
            return

        self.actual = str(int(self.actual)-1)


    def direita(self):

        if int(self.actual) == len(self.envs):
            print("Você está no último ambiente")
            return

        self.actual = str(int(self.actual)+1)


    def get_env_by_name(self, name):
        return {furniture.name: furniture for _, furniture in self.envs[self.actual].moveis.items()}[name]


    def __str__(self):

        # read environment schema
        with open('environment.schema', 'r') as schema:
            schema_str = schema.read()

        # set environment name
        schema_str = schema_str.replace('#'*schema_str.count('#'), self.envs[self.actual].name.center(schema_str.count('#'), ' '))

        # set furniture names
        for placeholder, furniture in self.envs[self.actual].moveis.items():
            schema_str = schema_str.replace(placeholder * schema_str.count(placeholder), furniture.name.center(schema_str.count(placeholder), ' '))

        # clean unused slots
        for i in range(1, 7):
            schema_str= schema_str.replace(str(i) * schema_str.count(str(i)), ' '*schema_str.count(str(i)))

        # replace environments
        if self.actual == '1':
            previous_env = None
            next_env = str(int(self.actual)+1)

        elif self.actual == str(len(self.envs)):
            previous_env = str(int(self.actual)-1)
            next_env = None

        else:
            previous_env = str(int(self.actual)-1)
            next_env = str(int(self.actual)+1)
    
        if previous_env:
            schema_str = schema_str.replace('X'*schema_str.count('X'), self.envs[previous_env].name.center(schema_str.count('X'), ' '))
        else: 
            schema_str = schema_str.replace('X'*schema_str.count('X'), ' '*schema_str.count('X'))


        if next_env:
            schema_str = schema_str.replace('Y'*schema_str.count('Y'), self.envs[next_env].name.center(schema_str.count('Y'), ' '))
        else: 
            schema_str = schema_str.replace('Y'*schema_str.count('Y'), ' '*schema_str.count('Y'))

        return schema_str

  
    
class Environment:
    """
      ADS of the a environment, an area that the player can interagir with
    """

    def __init__(self, name, moveis):
        self.name = name
        self.moveis = moveis

    def add_furniture(self, furniture, place):
        """
            Method to add the given furniture to the environment
          	Parameters:
            furniture (Object(Movel)): furniture to add
        """
        self.moveis[place] = furniture



class Móvel:
    """
      Super class to abstract furnitures
    """

    def __init__(self, name, message, itens):
        self.name = name
        self.message = message
        self.itens = itens

    def olhar(self):
        """
            Method that display the description of the furniture
        """
        print(self.message)

    def pegar_todos(self):
        """
            Method to that returns to the player all the itens in the furniture \
          and clear the itens list
        """
        if len(self.itens):
            all_itens = list(self.itens.values())
            all_itens = deepcopy(all_itens)
            self.itens = {}
            print('Você pegou todos os itens')

            return list(all_itens)

        else:
            return []  

    def pegar(self):
        """
            Method that returns to the player the item requested
        """
        try:

            print("Selecione um item:")
            for i in self.itens:
              print(i)

            item = input("Qual item você deseja pegar? ")
            item = deepcopy(self.itens[item])
            self.itens = {k:v for k,v in self.itens.items()}
            print('Você pegou o item')

            return [item]

        except Exception as e:
            ## In case the player inputs nonsense
            print("%s é um item inválido" % item)
            return None

    def store_item(self, item):
        self.itens[item.name] = item

    
    
class Item:
    """
      Super class to abstract itens
    """

    def __init__(self,name, message):
        self.name = name
        self.message = message

    def olhar(self):
        """
          Returns a desciption of the item
        """
        print(self.message)

    def __str__(self):
        return self.name
  
##### Não interativos############# Não interativos############# Não interativos############# Não interativos############# Não interativos############# Não interativos########

# Classes de moveis por sala

### Maquinário###

class Mapa(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()

class Mesa(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()

class Motor(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()
          
###Dormitorio###
class Cabine(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

    def play(self, inventory):
        # display message
        self.olhar()
        
        
class QuartoB(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

    def play(self, inventory):
        # display message
        self.olhar()

class QuartoC(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

    def play(self, inventory):
        # display message
        self.olhar()



#### Convés ####

          
class Bocha(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()

class TelescopioEsti(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()

class TelescopioBomb(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()          
          
  
  
  
  
#### Saguão ####
class Bar(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

    def play(self, inventory):
        # display message
        self.olhar()

class Mesa_pong(Móvel):
      def __init__(self, name, message, itens):
          super().__init__(name, message, itens)
          self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

      def play(self, inventory):
          # display message
          self.olhar()

class Sofa(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {'voltar': 'Parar de interagir com %s: ' % self.name}

    def play(self, inventory):
        # display message
        self.olhar()


##### interativos ############# interativos ############# interativos ############# interativos ############# interativos ############# interativos ########
################################################################################
## Classes exemplo
class ArmarioFerramentas(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'procurar': 'Procura por intens no %s' % self.name,
            'voltar': 'Parar de mexer no %s: ' % self.name,
            'pegar': 'Pegar um item específico',
            'pegar_todos': 'Pegar todos os itens'
        }

    def list(self):
        print("\nItens no %s" % self.name)
        for k, _ in self.itens.items():
            print(k)

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        print('O que deseja fazer no %s: ' % self.name)
        while 1:

            try:
                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'pegar_todos':
                    return self.pegar_todos()

                if action == 'pegar':
                    return self.pegar()

                if action == 'procurar':
                    self.list()

                if action == 'voltar':
                    break

            except Exception as exception:
                print('Interação inválida')
                break

                
                            
class Bote(Móvel):

    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {
            'ajuda': 'Retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'soltar': 'Tentar soltar o bote'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'soltar':
                    return self.soltar(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def soltar(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory.itens:
            print("\nEu preciso de algo para soltar esse bote a chave para liga-lo...")
            return False

        # caso as ferramentas não estejam no inventario
        if 'pe_de_cabra' and 'chave' not in [i.name for i in inventory.itens]:
            print("\nPreciso do pe-de-cabra e da chave para ligar esse bote...")
            return False

        print("libertando o bote...")
        animation = "|/-\\"
        idx = 0
        while 1:
            if idx == 30:
                break
            print(animation[idx % len(animation)], end="\r")
            idx += 1
            time.sleep(0.1)
        print('Aeeeee, bora vazaaaaaar')
        return True
      
#####################################################################################################################
class MeuQuarto(Móvel):
    def __init__(self, name, message, itens):
        super().__init__(name, message, itens)
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'procurar': 'Procura por intens no %s' % self.name,
            'voltar': 'Parar de mexer no %s: ' % self.name,
            'pegar': 'Pegar um item específico',
            'pegar_todos': 'Pegar todos os itens'
        }

    def list(self):
        print("\nItens no %s" % self.name)
        for k, _ in self.itens.items():
            print(k)

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        print('O que deseja fazer no %s: ' % self.name)
        while 1:

            try:
                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'pegar_todos':
                    return self.pegar_todos()

                if action == 'pegar':
                    return self.pegar()

                if action == 'procurar':
                    self.list()

                if action == 'voltar':
                    break

            except Exception as exception:
                print('Interação inválida')
                break

class Radio(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, itens_escondidos):
        super().__init__(name, message, itens)
        self.itens_escondidos = itens_escondidos
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'desmontar': 'Tentar desmontar o radio'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'desmontar':
                  return self.desmontar(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def desmontar(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory.itens:
            print("\nEu preciso de algo para abrir o rádio...")
            return False

        # caso as ferramentas não estejam no inventario
        elif 'ferramentas' not in [i.name for i in inventory.itens]:
            print("\nNão tenho uma caixa de ferramentas no meu inventário...")
            return False

        elif self.itens_escondidos == []:
            print('Voce ja abriu esse aparelho')
            
        else:
            print("Abrindo o radio...")

            animation = "|/-\\"
            idx = 0
            while 1:
                if idx == 30:
                    break
                print(animation[idx % len(animation)], end="\r")
                idx += 1
                time.sleep(0.1)
            itens_a_passar = deepcopy(self.itens_escondidos)
            inventory.add(itens_a_passar)
            self.itens_escondidos = []

            print('Um fusivel foi adicionado ao seu inventário')

            return False

class Tv(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, itens_escondidos):
        super().__init__(name, message, itens)
        self.itens_escondidos = itens_escondidos
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'desmontar': 'Tentar desmontar a Televisão'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'desmontar':
                  return self.desmontar(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def desmontar(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory.itens:
            print("\nEu preciso de algo para abrir essa Tv...")
            return False

        # caso as ferramentas não estejam no inventario
        elif 'ferramentas' not in [i.name for i in inventory.itens]:
            print("\nNão tenho uma caixa de ferramentas no meu inventário...")
            return False

        elif self.itens_escondidos == []:
            print('Voce ja abriu a televisão')
            
        else:
            print("Abrindo a Televisão...")

            animation = "|/-\\"
            idx = 0
            while 1:
                if idx == 30:
                    break
                print(animation[idx % len(animation)], end="\r")
                idx += 1
                time.sleep(0.1)
            itens_a_passar = deepcopy(self.itens_escondidos)
            inventory.add(itens_a_passar)
            self.itens_escondidos = []

            print('Um fusivel foi adicionado ao seu inventário')

            return False      

class Maquina_pesada(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, itens_escondidos):
        super().__init__(name, message, itens)
        self.itens_escondidos = itens_escondidos
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'desmontar': 'Tentar desmontar a maquina'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'desmontar':
                  return self.desmontar(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def desmontar(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory.itens:
            print("\nEu preciso de algo para abrir essa maquina...")
            return False

        # caso as ferramentas não estejam no inventario
        elif 'ferramentas' not in [i.name for i in inventory.itens]:
            print("\nNão tenho uma caixa de ferramentas no meu inventário...")
            return False

        elif self.itens_escondidos == []:
            print('Voce ja mexeu nessa maquina')
            
        else:
            print("Abrindo a maquina...")

            animation = "|/-\\"
            idx = 0
            while 1:
                if idx == 30:
                    break
                print(animation[idx % len(animation)], end="\r")
                idx += 1
                time.sleep(0.1)
            itens_a_passar = deepcopy(self.itens_escondidos)
            inventory.add(itens_a_passar)
            self.itens_escondidos = []

            print('Um fusivel foi adicionado ao seu inventário')

            return False

class Gerador(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, item_invisivel):
        super().__init__(name, message, itens)
        self.item_invisivel = item_invisivel
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'consertar': 'Tentar consertar a maquina'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'consertar':
                  return self.fix(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def fix(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory.itens:
            print("\nEu preciso de um fusivel para consertar esse gerador...")
            return False

        # caso as ferramentas não estejam no inventario
        elif 'fusivel30a' not in [i.name for i in inventory.itens]:
            print("\nNão tenho o fusivel certo no meu inventário...")
            return False
        elif self.item_invisivel == []:
            print('Voce ja restaurou a energia')
            return False

        print("Consertando gerador...")
        animation = "|/-\\"
        idx = 0
        while 1:
            if idx == 30:
                break
            print(animation[idx % len(animation)], end="\r")
            idx += 1
            time.sleep(0.1)
            ########
            itens_a_passar = deepcopy(self.item_invisivel)
            inventory2.add(itens_a_passar)
            self.item_invisivel = []
            
            print('Você restaurou a energia')

            return False

class Armario_eletrico(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, itens_escondidos):
        super().__init__(name, message, itens)
        self.itens_escondidos = itens_escondidos
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'abrir': 'Tentar abrir o armario'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'abrir':
                  return self.abrir(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def abrir(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory2.itens:
            print("\nEu preciso de energia pra abrir esse armário...")
            return False

        # caso as ferramentas não estejam no inventario
        elif 'energia' not in [i.name for i in inventory2.itens]:
            print("\nNão liguei a energia ainda...")
            return False
        elif self.itens_escondidos == []:
            print('Voce ja abriu esse armario')
            return False
        
        print("abrindo armário...")
        animation = "|/-\\"
        idx = 0
        while 1:
            if idx == 30:
                break
            print(animation[idx % len(animation)], end="\r")
            idx += 1
            time.sleep(0.1)
            ########
            itens_a_passar = deepcopy(self.itens_escondidos)
            inventory.add(itens_a_passar)
            self.itens_escondidos = []
            
            print('Você pegou um pe de cabra')

            return False
          
class Cofre(Móvel):
    # itens esconditos é lista de itens que vai pro inventario depois de quebrar
    def __init__(self, name, message, itens, itens_escondidos):
        super().__init__(name, message, itens)
        self.itens_escondidos = itens_escondidos
        self.actions = {
            'ajuda': 'retorna as ações possíveis',
            'voltar': 'Parar de interagir com %s' % self.name,
            'abrir': 'Tentar abrir o cofre'
        }

    def play(self, inventory):

        # display message
        self.olhar()

        # Entra em um novo loop para interação com aquele móvel
        while 1:

            try:

                action = input("\nInsira um comando para interagir com %s:\n" % self.name)

                if action == 'ajuda':
                    for key, value in self.actions.items():
                        print("%s: %s" % (key, value))

                if action == 'abrir':
                  return self.abrir(inventory)


                if action == 'voltar':
                    break

            except Exception:
                print('Interação inválida')
                continue

    def abrir(self, inventory):

        # CASO O INVENTARIO ESTEJA VAZIO
        if not inventory2.itens:
            print("\nEu preciso de energia pra abrir esse armário...")
            return False
        
        # caso as ferramentas não estejam no inventario
        elif self.itens_escondidos == []:
            print('Voce ja abriu esse cofre')
            return False
            
        if 'energia' not in [i.name for i in inventory2.itens]:
            print("\nNão liguei a energia ainda...")
            return False
        senha = str(input('Agora que tem energia, posso por a senha: '))
        if senha == '77815':
            print("abrindo cofre...")
            animation = "|/-\\"
            idx = 0
            while 1:
                if idx == 30:
                    break
                print(animation[idx % len(animation)], end="\r")
                idx += 1
                time.sleep(0.1)
                ########
                itens_a_passar = deepcopy(self.itens_escondidos)
                inventory.add(itens_a_passar)
                self.itens_escondidos = []

                print('Você pegou a chave do bote')
                return False
        else:
          print('Ih, nao eh essa senha nao...')

          return False
#####################################################################################################################
# player inventory
class Inventory:

    def __init__(self):
        self.itens = []

    def add(self, item):
        self.itens += item

    def remove(self, name):
        self.itens = [i for i in self.itens if i.name != name]

    def __str__(self):
        title = "\nSeu inventário contém os seguintes itens:\n"
        return title + "\n".join([i.name for i in self.itens])
      
class Inventory2:

    def __init__(self):
        self.itens = []

    def add(self, item):
        self.itens += item

    def remove(self, name):
        self.itens = [i for i in self.itens if i.name != name]

    def __str__(self):
        title = "\nSeu inventário contém os seguintes itens:\n"
        return title + "\n".join([i.name for i in self.itens])



# initialize scenario object
scenario = Scenario()

# create all environments
maquinario = Environment('Maquinário', {})
dormitorio = Environment('Dormitório',{})
saguao = Environment('Saguão', {})
conves = Environment('Convés',{})

# create all items
ferramentas = Item('ferramentas','Uma caixa simples com ferramentas')
fusivel13a = Item('fusivel13a','um fusivel de 13 Amperes')
fusivel20a = Item('fusivel20a','um fusivel de 20 Amperes')
fusivel30a = Item('fusivel30a','um fusivel de 30 Amperes')
energia = Item('energia','energia que ngm ve, escondidinha no inventario q ngm ve hehe')
pe_de_cabra = Item('pe_de_cabra', 'um pe de cabra... da pra usar de alavanca, ou ate quebrar algo')
relogio = Item('relogio','Mds, o relogio que meu pai me deu. Nunca que eu sairia desse navio sem isso!!!')
chave = Item('chave','Aaah, a chave do bote: bora sair daquii!')

## create all furnitures
#maquinario#
armario = ArmarioFerramentas('armario_ferramentas', 'Armário com ferramentas comuns de trabalho', {})
motor = Motor('motor', 'Que motorzão', {}) #####vamos mudar aqui caiçaraaaa
mapa = Mapa('mapa', 'Um mapa da Bahia... mas nem na Bahia estamos...',{})
mesa = Mesa('mesa', 'Esta mesa está meio suja', {})
gerador = Gerador('gerador', 'Um gerador... devo conseguir energia com isso aqui',{},[energia])
armario_eletrico = Armario_eletrico('armario_eletrico', 'O que será que tem aqui dentro?', {},[pe_de_cabra])

##Dormitório
cabine = Cabine('cabine','Uau, a cabine do capitão, chique demais!!',{})
quartob = QuartoB('quarto_b','O quarto do Charles, parece que não tem nada aqui',{})
quartoc = QuartoC('quarto_c','O quarto do Jeff, eu não tenho como entrar aqui',{})
meu_quarto = MeuQuarto('meu_quarto','Meu quarto: aquilo deve estar aqui...',{})


##Convés
bocha = Bocha('bocha','Pena que o navio está afundado, seria ótimo uma partidinha',{})
tele_esti = TelescopioEsti('vista_estibordo','Puxa vida mas que vista!!!',{})
tele_bomb = TelescopioBomb('vista_bombordo','Uma bela visão',{})
maquina_pesada = Maquina_pesada('maquina_pesada','Posso tentar procurar um fusivel aqui',{},[fusivel30a])
bote = Bote('bote','Esse bote eh minha saida desse navio!!',{})

##Saguão##
bar = Bar('bar', 'ai se eu tivesse tempo pra uma bebida',{})
mesa_pong = Mesa_pong('tenis_de_mesa', 'na minha terra isso eh ping pong... e eu era o brabo', {})
sofa = Sofa('sofa', 'queria mimir! Mas não dá tempo, fiquei com Deus', {})
radio = Radio('radio', 'Eu posso desmontar para tentar encontrar um fusivel', {}, [fusivel13a])
tv = Tv('tv', 'Aqui deve ter um fusível hein...', {}, [fusivel20a])
cofre = Cofre('cofre', 'Um cofre... preciso de energia e da senha pra abri-lo',{},[chave])

# store all items inside furnitures
armario.store_item(ferramentas)
meu_quarto.store_item(relogio)
            
# add environments to the scenario
scenario.add_environment(maquinario, '1')
scenario.add_environment(dormitorio,'2')
scenario.add_environment(saguao,'3')
scenario.add_environment(conves,'4')

# add furnitures to environment
### MOVEIS MAQUINARIO
maquinario.add_furniture(mapa, '2')
maquinario.add_furniture(armario,'1')
maquinario.add_furniture(mesa, '4')
maquinario.add_furniture(motor, '5')
maquinario.add_furniture(gerador, '3')
maquinario.add_furniture(armario_eletrico,'6')


## MOVEIS DORMITORIO
dormitorio.add_furniture(quartob,'2')
dormitorio.add_furniture(cabine,'3')
dormitorio.add_furniture(quartoc,'4')
dormitorio.add_furniture(meu_quarto,'5')

## MOVEIS CONVES
conves.add_furniture(bocha,'1')
conves.add_furniture(tele_bomb,'2')
conves.add_furniture(tele_esti,'5')
conves.add_furniture(maquina_pesada,'4')
conves.add_furniture(bote,'6')


## MOVEIS SAGUÃO
saguao.add_furniture(bar,'2')
saguao.add_furniture(mesa_pong,'3')
saguao.add_furniture(sofa,'5')
saguao.add_furniture(radio,'6')
saguao.add_furniture(tv,'4')
saguao.add_furniture(cofre,'1')


# create player inventory
inventory = Inventory()
inventory2 = Inventory2()

# list all available actions
available_actions = {
  'sair': 'Sai do jogo',
  'ajuda': 'Mostra os comandos possíveis',
  'inventario': 'Abre inventario',
  'direita': 'Vai para a sala da direita',
  'esquerda': 'Vai para a sala da esquerda',
  'interagir': 'Interage com moveis da sala',
  'olhar': 'Dá descrição de itens e móveis'
}

        
# main
print(scenario)
while 1:
      
    try:

        # pede ação ao jogador
        action = input("\nInsira uma ação: ").lower()
        
        # sai do jogo
        if action == 'sair':
            break
            
        # mostra a ajuda
        elif action == 'ajuda':
            for key, value in available_actions.items():
                print("%s: %s" % (key, value))
                
        elif action == 'inventario':
            print(inventory)
        #elif action == 'inventario2': 
            #print(inventory2)

        ## Ações de movimentação
            
        elif action == 'direita':

            # faz o que precisa
            scenario.direita()
            print(scenario)
            
        elif action == 'esquerda':

            # faz o que precisa
            scenario.esquerda()
            print(scenario)

            
        # interação com os elementos
        elif 'interagir' in action:
            print(scenario)
            # get the desired furniture
            movel = action.split()[1]
            resp = scenario.get_env_by_name(movel).play(inventory)

            if movel == 'bote' and resp:
                print("Parabens, você conseguiu sair do navio!!")
                break

            if resp:

                # add item to the player inventory
                inventory.add(resp)


        # ação de olhar
        elif action == 'olhar':

            # get the desired furniture
            movel = action.split()[1]
            scenario.envs[movel].olhar()

    except Exception as exception:
        print('Interação inválida\n')
        continue